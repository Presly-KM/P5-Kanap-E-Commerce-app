//@ts-nocheck
const queryString = window.location.search                                                          // On r√©cup√®re les param√®tres de l'URL (tout ce qui se trouve apr√®s le point d'interrogation ?)
const urlParams = new URLSearchParams(queryString)
const id = urlParams.get("id")                                                                      // On r√©cup√®re la valeur du param√®tre "id" (l'id du produit) gr√¢ce √† la m√©thode get() de l'interface URLSearchParams. On stocke cette valeur dans la variable id.

if (!id) {                                                                                          // Si l'id n'existe pas (si on a pas d'id dans l'url)...
    window.location.href = 'index.html'                                                             // ...on redirige l'utilisateur vers la page d'accueil (index.html)
}

fetch(`http://localhost:3000/api/products/${id}`)                                                   // On utilise la m√©thode fetch() pour faire une requ√™te HTTP GET √† l'API pour r√©cup√©rer les donn√©es du produit avec l'id sp√©cifi√© dans l'URL et qui a √©t√© r√©cup√©r√© plus haut (l.2-4).
    .then((response) => response.json())
    .then((res) => handleData(res))                                                                 // Quand on re√ßoit la r√©ponse de l'API, on la transforme en JSON et on l'envoie √† la fonction handleData() pour traiter les donn√©es du produit.
    .catch((error) => {
        console.error('Erreur:', error)
        window.location.href = 'index.html'
    })

function handleData(couch) {                                                                        // On cr√©e une fonction handleData() qui va nous permettre de traiter les donn√©es du produit. On lui passe en param√®tre les donn√©es du produit (couch).
    const { altTxt, colors, description, imageUrl, name, price } = couch                            // On utilise la destructuration pour r√©cup√©rer les donn√©es du produit. On cr√©e une variable pour chaque donn√©e que l'on va utiliser.
    makeImage(imageUrl, altTxt)                                                                                 
    makeTitle(name)
    makePrice(price)
    makeCartContent(description)
    makeColors(colors)                                                                              // On appelle la fonction makeImages() pour cr√©er l'image du produit. On lui passe en param√®tre l'url de l'image et le texte alternatif de l'image. Puis on appelle les autres fonctions pour cr√©er le titre, le prix, la description et les couleurs du produit.
}

function makeImage(imageUrl, altTxt) {                                                              // On cr√©e une fonction makeImage() qui va nous permettre de cr√©er l'image du produit. On lui passe en param√®tre l'url de l'image et le texte alternatif de l'image.
    const image = document.createElement("img")
    image.src = imageUrl
    image.alt = altTxt
    const parent = document.querySelector(".item__img")
    if (parent != null) parent.appendChild(image)
}

function makeTitle(name) {                                                                          // On cr√©e une fonction makeTitle() qui va nous permettre de cr√©er le titre du produit. On lui passe en param√®tre le nom du produit.
    const h1 = document.querySelector("#title")
    if (h1 != null) h1.textContent = name
}

function makePrice(price) {                                                                         // On cr√©e une fonction makePrice() qui va nous permettre de cr√©er le prix du produit. On lui passe en param√®tre le prix du produit.
    const span = document.querySelector("#price")
    if (span != null) span.textContent = price
}

function makeCartContent(description) {                                                             // On cr√©e une fonction makeCartContent() qui va nous permettre de cr√©er la description du produit. On lui passe en param√®tre la description du produit.
    const p = document.querySelector("#description")
    if (p != null) p.textContent = description
}

function makeColors(colors) {                                                                       // On cr√©e une fonction makeColors() qui va nous permettre de cr√©er les options de couleur pour le produit. On lui passe en param√®tre les couleurs du produit.
    const select = document.querySelector("#colors")
    if (select != null) { 
        colors.forEach((color) => {
            const option = document.createElement("option")
            option.value = color
            option.textContent = color
            select.appendChild(option)
        })
    }
}

const button = document.querySelector("#addToCart")                                                 // On r√©cup√®re le bouton "Ajouter au panier" et on l'assigne √† la variable button.
button.addEventListener("click", handleClick)                                                       // On ajoute un √©couteur d'√©v√©nement au bouton "Ajouter au panier" qui va appeler la fonction handleClick() quand l'utilisateur clique sur le bouton.

function handleClick() {                                                                            // On cr√©e une fonction handleClick() qui va nous permettre de g√©rer le clic sur le bouton "Ajouter au panier".
    const color = document.querySelector("#colors").value
    const quantity = document.querySelector("#quantity").value

    if (isOrderInvalid(color, quantity)) return                                                     // Si la commande est invalide (si l'utilisateur n'a pas s√©lectionn√© de couleur ou de quantit√©) on arr√™te l'ex√©cution de la fonction.
    
    addToCart(id, color, quantity)
    alert("L'article a √©t√© ajout√© √† votre panier ! üëç")
    redirectToCart()
}

function addToCart(productId, color, quantity) {                                                    // On cr√©e une fonction addToCart() qui va nous permettre d'ajouter le produit au panier. On lui passe en param√®tre l'id du produit, la couleur et la quantit√©.
    const cartData = localStorage.getItem('kanapCart')                                              // On r√©cup√®re les donn√©es du panier dans le localStorage. On utilise la m√©thode getItem() de l'interface Storage pour r√©cup√©rer les donn√©es du panier qui sont stock√©es sous la cl√© 'kanapCart'. On assigne ces donn√©es √† la variable cartData.
    let cart = cartData ? JSON.parse(cartData) : []                                                 // Si les donn√©es du panier existent, on les transforme en objet JavaScript avec la m√©thode JSON.parse() et on les assigne √† la variable cart. Sinon, on initialise cart comme un tableau vide.
    
    const existingItemIndex = cart.findIndex(item =>                                                // On avait r√©cup√©r√© les donn√©es du panier dans le localStorage (l.76) dans le but de v√©rifier si le produit qu'on veut ajouter au panier existe d√©j√† dans le panier (m√™me id et m√™me couleur). Pour cela on utilise la m√©thode findIndex() de l'interface Array qui va nous permettre de trouver l'index de l'√©l√©ment dans le tableau cart qui correspond au produit qu'on veut ajouter au panier.
        item.id === productId && item.color === color
    )
    
    if (existingItemIndex > -1) {                                                                   // Si le produit existe d√©j√† dans le panier (si l'index est sup√©rieur √† -1)...
        cart[existingItemIndex].quantity += Number(quantity)                                        // ...on met √† jour la quantit√© en ajoutant la nouvelle quantit√© √† l'ancienne.
        alert(`L'article est d√©j√† dans le panier. La quantit√© a √©t√© augment√©e : ${cart[existingItemIndex].quantity}`)
    } else {
        cart.push({                                                                                 // Sinon, on ajoute le nouveau produit au panier en utilisant la m√©thode push() pour ajouter un nouvel objet au tableau cart.
            id: productId,
            color: color,
            quantity: Number(quantity)
        })
    }
    
    localStorage.setItem('kanapCart', JSON.stringify(cart))                                         // On enregistre les donn√©es du panier mises √† jour dans le localStorage en utilisant la m√©thode setItem() de l'interface Storage. On transforme l'objet cart en cha√Æne JSON avec la m√©thode JSON.stringify() et on le stocke sous la cl√© 'kanapCart'.
}

function isOrderInvalid(color, quantity) {                                                          // On cr√©e une fonction isOrderInvalid() qui va nous permettre de v√©rifier si la commande est valide. On lui passe en param√®tre la couleur et la quantit√©.
    if (color == null || color === "" || quantity == null || quantity == 0) {
        alert("Veuillez s√©lectionner une couleur et une quantit√© ! ‚õî‚ö†")
        return true
    }
    return false
}

function redirectToCart() {                                                                         // On cr√©e une fonction redirectToCart() qui va nous permettre de rediriger l'utilisateur vers la page du panier.
    window.location.href = "cart.html"
}

